import { SlashCommandBuilder, Client, ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { Db } from "mongodb";

import { CasinoSchema } from "../../Types/MongoDB/Interface/CasinoSchema";

import SlashCommand from "../../Types/Bot/Interface/SlashCommand";
import SlotItem from "../../Types/Bot/Interface/SlotItem";
import Users from "../../Types/MongoDB/Interface/Users";

import getHalfOrAll from "../../Utils/GetHalfOrAll/GetHalfOrAll";
import simpleEmbeds from "../../Utils/SimpleEmbeds/SimpleEmbeds";
import shuffleArray from "../../Utils/ShuffleArray/ShuffleArray";
import getSlotLine from "../../Utils/Casino/Slots/GetSlotLine";

const commandName = "Slots";

export let command: SlashCommand = {
    settings: {
        name: commandName.toLowerCase(),
        command: new SlashCommandBuilder()
            .setName(commandName.toLowerCase())
            .setDescription("–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç.")
            .addStringOption((options) =>
                options.setName("bet")
                    .setDescription("–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.  Half - –ø–æ–ª–æ–≤–∏–Ω–∞, All - –≤—Å–µ.")
                    .setRequired(true)),
        run: async (_: Client<boolean>, interaction: ChatInputCommandInteraction, database: Db) => {
            const usersCollection = database.collection("Users");
            const casinoCollection = database.collection("Casino");

            const casinoSettings = await casinoCollection.findOne({}) as any as CasinoSchema;
            if (!casinoSettings) { return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∑–∏–Ω–æ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")], ephemeral: true }).catch((_) => { }); }

            const findUser = await usersCollection.findOne({ id: interaction.user.id }) as any as Users;

            const getBet = isNaN(parseInt(interaction.options.getString("bet"))) ? getHalfOrAll(interaction.options.getString("bet"), findUser.balance) : parseInt(interaction.options.getString("bet"));

            if (getBet == null) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ/Half/All.")], ephemeral: true }).catch((_) => { });
            if (getBet < casinoSettings.slots.min_bet) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: __\`${casinoSettings.slots.min_bet} üíµ\`__`)], ephemeral: true }).catch((_) => { });
            if (findUser.balance < getBet) { return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥.")], ephemeral: true }).catch((_) => { }); }

            const embed = new EmbedBuilder();
            const allSlotEmojis: Array<SlotItem> = shuffleArray(casinoSettings.slots.items);

            let spin = 1;

            let centerSlotLine = getSlotLine(allSlotEmojis, 3);
            let spinSlotsText = `\`‚óñ ${getSlotLine(allSlotEmojis, 3).map((e) => `${e.emoji}`).join(" ")} ‚óó\`\r\n__\`‚óñ ${centerSlotLine.map((e) => `${e.emoji}`).join(" ")} ‚óó\`__\r\n\`‚óñ ${getSlotLine(allSlotEmojis, 3).map((e) => `${e.emoji}`).join(" ")} ‚óó\``;

            embed.setTitle("**     ‚Ä¢ Slots ‚Ä¢**")
                .setColor("#923939")
                .setDescription(spinSlotsText)
                .setFooter({ text: interaction.user.username })
                .setTimestamp();

            await interaction.reply({ embeds: [embed] }).catch((_) => { });

            async function spinSlots() {
                centerSlotLine = getSlotLine(allSlotEmojis, 3);
                spinSlotsText = `\`‚óñ ${getSlotLine(allSlotEmojis, 3).map((e) => `${e.emoji}`).join(" ")} ‚óó\`\r\n__\`‚óñ ${centerSlotLine.map((e) => `${e.emoji}`).join(" ")} ‚óó\`__\r\n\`‚óñ ${getSlotLine(allSlotEmojis, 3).map((e) => `${e.emoji}`).join(" ")} ‚óó\``;

                embed.setDescription(spinSlotsText);

                await interaction.editReply({ embeds: [embed] }).catch((_) => { });

                if (spin < casinoSettings.slots.max_spins - 1) { spin++; setTimeout(() => { spinSlots(); }, casinoSettings.slots.delay_spins); return; };

                getResults();
            }

            function getResults() {
                setTimeout(async () => {
                    const getMultiplier = centerSlotLine[0].emoji == centerSlotLine[1].emoji || centerSlotLine[1].emoji == centerSlotLine[2].emoji
                        ?
                        centerSlotLine[1].multiplier * casinoSettings.slots.double_match_multiplier
                        :
                        centerSlotLine[0].emoji == centerSlotLine[1].emoji && centerSlotLine[1].emoji == centerSlotLine[2].emoji
                            ?
                            centerSlotLine[1].multiplier * casinoSettings.slots.triple_match_multiplier
                            :
                            null;

                    await usersCollection.updateOne({ id: interaction.user.id }, { $set: { balance: getMultiplier ? findUser.balance + Math.round(getBet * getMultiplier) : findUser.balance - getBet } });

                    embed.setDescription(`${embed.data.description}\r\n\r\n**–í—ã ${getMultiplier ? `–≤—ã–∏–≥—Ä–∞–ª–∏` : `–ø—Ä–æ–∏–≥—Ä–∞–ª–∏`}: __\`${getMultiplier ? Math.round(getBet * getMultiplier) : getBet} üíµ\`__**`);

                    return interaction.editReply({ embeds: [embed] });
                }, casinoSettings.slots.wait_after_spins);
            }

            setTimeout(() => { spinSlots(); }, casinoSettings.slots.delay_spins);
        }
    }
}