import { SlashCommandBuilder, Client, ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { Db } from "mongodb";

import { CasinoSchema } from "../../Types/MongoDB/Interface/CasinoSchema";

import SlashCommand from "../../Types/Bot/Interface/SlashCommand";
import Users from "../../Types/MongoDB/Interface/Users";

import getHalfOrAll from "../../Utils/GetHalfOrAll/GetHalfOrAll";
import simpleEmbeds from "../../Utils/SimpleEmbeds/SimpleEmbeds";
import checkPoints from "../../Utils/Casino/Casino/CheckPoints";
import randomizer from "../../Utils/Randomizer/Randomizer";

const commandName = "Casino";

export let command: SlashCommand = {
    settings: {
        name: commandName.toLowerCase(),
        command: new SlashCommandBuilder()
            .setName(commandName.toLowerCase())
            .setDescription("–ü–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –≤—Å—Ç–∞–≤–∫–µ.")
            .addStringOption((options) =>
                options.setName("bet")
                    .setDescription("–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å. Half - –ø–æ–ª–æ–≤–∏–Ω–∞, All - –≤—Å–µ.")
                    .setRequired(true)),
        run: async (_: Client<boolean>, interaction: ChatInputCommandInteraction, database: Db) => {
            const usersCollection = database.collection("Users");
            const casinoCollection = database.collection("Casino");

            const casinoSettings = await casinoCollection.findOne({}) as any as CasinoSchema;
            if (!casinoSettings) { return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∑–∏–Ω–æ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")], ephemeral: true }).catch((_) => { }); }

            const embed = new EmbedBuilder();

            embed.setTitle("CASINO")
                .setColor("#035afc")
                .setFooter({ text: interaction.user.username, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();

            const findUser = await usersCollection.findOne({ id: interaction.user.id }) as any as Users;

            const getBet = isNaN(parseInt(interaction.options.getString("bet"))) ? getHalfOrAll(interaction.options.getString("bet"), findUser.balance) : parseInt(interaction.options.getString("bet"));

            if (getBet == null) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ/Half/All.")], ephemeral: true }).catch((_) => { });
            if (getBet < casinoSettings.casino.min_bet) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: __\`${casinoSettings.casino.min_bet} üíµ\`__`)], ephemeral: true }).catch((_) => { });
            if (findUser.balance < getBet) { return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥.")], ephemeral: true }).catch((_) => { }); }

            const randNumber = randomizer(0, 100);
            const getMultiplier = checkPoints(casinoSettings.casino.points, randNumber);

            embed
                .setDescription(`**–ß–∏—Å–ª–æ: __\`${randNumber}\`__\r\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å: __\`x${getMultiplier ?? "0"}\`__\r\n\r\n–í—ã ${getMultiplier ? `–≤—ã–∏–≥—Ä–∞–ª–∏` : `–ø—Ä–æ–∏–≥—Ä–∞–ª–∏`}: __\`${getMultiplier ? Math.round(getBet * getMultiplier) : getBet} üíµ\`__**`)
                .setThumbnail(getMultiplier ? "https://t3.ftcdn.net/jpg/03/14/56/66/360_F_314566645_UNHlYyGK2EVdGQ8MoNw95vvH44yknrc7.jpg" : "https://t3.ftcdn.net/jpg/03/64/29/38/360_F_364293854_HGxpAAsozaFukVCPt3LFBYRkeKtDbQkj.jpg");

            await usersCollection.updateOne({ id: interaction.user.id }, { $set: { balance: getMultiplier ? findUser.balance + Math.round(getBet * getMultiplier) : findUser.balance - getBet } });

            return interaction.reply({ embeds: [embed] }).catch((_) => { });
        }
    }
}