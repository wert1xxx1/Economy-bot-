import { SlashCommandBuilder, Client, ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { Db } from "mongodb";

import SettingsSchema from "../../Types/MongoDB/Interface/SettingsSchema";
import SlashCommand from "../../Types/Bot/Interface/SlashCommand";
import Users from "../../Types/MongoDB/Interface/Users";

import getPicture from "../../Utils/GetCasePicture/GetCasePicture";
import simpleEmbeds from "../../Utils/SimpleEmbeds/SimpleEmbeds";
import randomizer from "../../Utils/Randomizer/Randomizer";

const commandName = "Case";

export let command: SlashCommand = {
    settings: {
        name: commandName.toLowerCase(),
        command: new SlashCommandBuilder()
            .setName(commandName.toLowerCase())
            .setDescription("–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤.")
            .addSubcommand((subcommand) =>
                subcommand.setName("show")
                    .setDescription("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ –∫–µ–π—Å–∞."))
            .addSubcommand((subcommand) =>
                subcommand.setName("buy")
                    .setDescription("–ö—É–ø–∏—Ç—å –∫–µ–π—Å(—ã).")
                    .addIntegerOption((options) =>
                        options.setName("number")
                            .setDescription("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.")
                            .setMinValue(1)
                            .setRequired(true)))
            .addSubcommand((subcommand) =>
                subcommand.setName("open")
                    .setDescription("–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å.")
                    .addIntegerOption((options) =>
                        options.setName("number")
                            .setDescription("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å.")
                            .setMinValue(1)
                            .setMaxValue(100)
                            .setRequired(true))),
        run: async (_: Client<boolean>, interaction: ChatInputCommandInteraction, database: Db) => {
            const settingsCollection = database.collection("Settings");
            const usersCollection = database.collection("Users");

            const getSettings = await settingsCollection.findOne({}) as any as SettingsSchema;
            if (!getSettings) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")], ephemeral: true }).catch((_) => { });

            const findUser = await usersCollection.findOne({ id: interaction.user.id }) as any as Users;

            const embed = new EmbedBuilder();

            embed.setTitle("CASE")
                .setColor("#cf9a29")
                .setFooter({ text: interaction.user.username, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();

            switch (interaction.options.getSubcommand())
            {
                case 'show':
                    embed
                        .setDescription(`**–¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω –∫–µ–π—Å: __\`${getSettings.economy.case.price} üíµ\`__**`);

                    return interaction.reply({ embeds: [embed] }).catch((_) => { });

                case 'buy':
                    const caseBuyNumber = interaction.options.getInteger("number");
                    const allCasePrice = caseBuyNumber * getSettings.economy.case.price;

                    if (findUser.balance < allCasePrice) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, `–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${caseBuyNumber} –∫–µ–π—Å(-–æ–≤).`)], ephemeral: true }).catch((_) => { });

                    await usersCollection.updateOne({ id: interaction.user.id }, { $set: { balance: findUser.balance - allCasePrice, cases: findUser.cases + caseBuyNumber } });

                    embed.setDescription(`**–ö—É–ø–ª–µ–Ω–æ: __\`${caseBuyNumber} –∫–µ–π—Å(-–æ–≤)\`__\r\n\r\n–û–ø–ª–∞—á–µ–Ω–æ: __\`${allCasePrice} üíµ\`__**`);

                    return interaction.reply({ embeds: [embed] }).catch((_) => { });

                case 'open':
                    const caseNumber = interaction.options.getInteger("number");

                    if (findUser.cases < caseNumber) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, `–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–µ–π—Å–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.`)], ephemeral: true }).catch((_) => { });

                    let sumFromCases = 0;

                    for (let i = 0; i < caseNumber; i++)
                        sumFromCases += randomizer(getSettings.economy.case.min, getSettings.economy.case.max);

                    const randomNumber = Number((Math.random() * (getSettings.economy.case.max_compensation - getSettings.economy.case.min_compensation) + getSettings.economy.case.max_compensation).toPrecision(3));

                    if (caseNumber > 1) sumFromCases = Math.round(sumFromCases * randomNumber);

                    const getCasePicture = (getPicture(Math.round(caseNumber == 1 ? (sumFromCases / getSettings.economy.case.max) * 100 : ((sumFromCases / caseNumber) / sumFromCases) * 100)));

                    await usersCollection.updateOne({ id: interaction.user.id }, { $set: { balance: findUser.balance + sumFromCases, cases: findUser.cases - caseNumber } });

                    embed.setDescription(`**–û—Ç–∫—Ä—ã—Ç–æ: __\`${caseNumber} –∫–µ–π—Å(-–æ–≤)\`__\r\n\r\n–í—ã–ø–∞–ª–æ: __\`${sumFromCases} üíµ\`__**`)
                        .setThumbnail(getCasePicture);

                    return interaction.reply({ embeds: [embed] }).catch((_) => { });
            }
        }
    }
}