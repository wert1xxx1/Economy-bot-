import { SlashCommandBuilder, Client, ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { Db } from "mongodb";

import SettingsSchema from "../../Types/MongoDB/Interface/SettingsSchema";
import SlashCommand from "../../Types/Bot/Interface/SlashCommand";
import Users from "../../Types/MongoDB/Interface/Users";

import simpleEmbeds from "../../Utils/SimpleEmbeds/SimpleEmbeds";
import randomizer from "../../Utils/Randomizer/Randomizer";

const commandName = "Work";

export let command: SlashCommand = {
    settings: {
        name: commandName.toLowerCase(),
        command: new SlashCommandBuilder()
            .setName(commandName.toLowerCase())
            .setDescription("–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ —Ä–∞–±–æ—Ç—É."),
        run: async (_: Client<boolean>, interaction: ChatInputCommandInteraction, database: Db) => {
            const settingsCollection = database.collection("Settings");
            const usersCollection = database.collection("Users");

            const getSettings = await settingsCollection.findOne({}) as any as SettingsSchema;
            if (!getSettings) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")], ephemeral: true }).catch((_) => { });

            const findUser = await usersCollection.findOne({ id: interaction.user.id }) as any as Users;

            if ((findUser.cooldown.work * 1000) > Date.now()) return interaction.reply({ embeds: [simpleEmbeds("error", commandName, `–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏.\r\n–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: <t:${findUser.cooldown.work}:f> ‚è≥`)], ephemeral: true }).catch((_) => { });

            const embed = new EmbedBuilder();

            embed.setTitle("**WORK**")
                .setColor("#cf9a29")
                .setFooter({ text: interaction.user.username, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();

            const workMoney = randomizer(getSettings.economy.work.min, getSettings.economy.work.max);
            const cooldown = Math.ceil((Date.now() + getSettings.economy.work.cooldown) / 1000);

            await usersCollection.updateOne({ id: interaction.user.id }, { $set: { balance: findUser.balance + workMoney, "cooldown.work": cooldown } });

            embed
                .setDescription(`**–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: __\`${workMoney} üíµ\`__\r\n–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: <t:${cooldown}:f>‚è≥**`)

            interaction.reply({ embeds: [embed] }).catch((_) => { });
        }
    }
}